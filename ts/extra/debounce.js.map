{"version":3,"file":"debounce.js","sourceRoot":"","sources":["../../src/extra/debounce.ts"],"names":[],"mappings":";;AAAA,MAAM,QAAQ,GAAG,CAAC,EAAY,EAAE,OAAe,GAAG,EAAE,YAAqB,KAAK,KAAK,CAAC,GAAG,IAAW;IAChG,MAAM,GAAG,GAAG,IAAI,CAAC;IACjB,IAAI,OAAO,CAAC;IAEZ,MAAM,OAAO,GAAG;QACd,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;YACb,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QACtB,OAAO,GAAG,IAAI,CAAC;IACjB,CAAC,CAAC;IAEF,EAAE,CAAC,CAAC,OAAO,CAAC;QACV,YAAY,CAAC,OAAO,CAAC,CAAC;IACxB,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;QACjB,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAEtB,OAAO,GAAG,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,kBAAe,QAAQ,CAAC","sourcesContent":["const debounce = (fn: Function, wait: number = 100, immediate: boolean = false) => (...args: any[]) => {\n  const obj = this;\n  let timeout;\n\n  const delayed = () => {\n    if (!immediate)\n      fn.apply(obj, args);\n    timeout = null;\n  };\n\n  if (timeout)\n    clearTimeout(timeout);\n  else if (immediate)\n    fn.apply(obj, args);\n\n  timeout = setTimeout(delayed, wait);\n};\n\nexport default debounce;\n"]}